/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var c=Object.prototype.hasOwnProperty;var h=(i,e)=>{for(var o in e)a(i,o,{get:e[o],enumerable:!0})},F=(i,e,o,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of p(e))!c.call(i,s)&&s!==o&&a(i,s,{get:()=>e[s],enumerable:!(t=f(e,s))||t.enumerable});return i};var P=i=>F(a({},"__esModule",{value:!0}),i);var u={};h(u,{default:()=>n});module.exports=P(u);var l=require("obsidian"),n=class extends l.Plugin{async onload(){this.registerEvent(this.app.workspace.on("file-menu",(e,o)=>{o instanceof l.TFolder&&o.children.length!==0?(e.addItem(t=>{t.setTitle("Fold properties").setIcon("fold").onClick(async()=>{await this.foldAllProperties(o)})}),e.addItem(t=>{t.setTitle("Unfold properties").setIcon("unfold").onClick(async()=>{await this.unfoldAllProperties(o)})})):o instanceof l.TFile&&(e.addItem(t=>{t.setTitle("Fold properties").setIcon("fold").onClick(async()=>{await this.foldPropertiesForFile(o)})}),e.addItem(t=>{t.setTitle("Unfold properties").setIcon("unfold").onClick(async()=>{await this.unfoldPropertiesForFile(o)})}))}))}async foldAllProperties(e){for(let o of e.children)o instanceof l.TFile?await this.foldPropertiesForFile(o):o instanceof l.TFolder&&await this.foldAllProperties(o);new l.Notice(`Folded properties for all files in ${e.path}`)}async unfoldAllProperties(e){for(let o of e.children)o instanceof l.TFile?await this.unfoldPropertiesForFile(o):o instanceof l.TFolder&&await this.unfoldAllProperties(o);new l.Notice(`Unfolded properties for all files in ${e.path}`)}async foldPropertiesForFile(e){let o=this.app,t=o.foldManager.loadPath(e.path);if(!t){let r=(await o.vault.read(e)).split(`
`),d={folds:[{from:0,to:0}],lines:r.length};o.foldManager.savePath(e.path,d)}if(t&&!this.isPropertiesFolded(t)){let s={folds:[{from:0,to:0},...t.folds],lines:t.lines};o.foldManager.savePath(e.path,s)}}async unfoldPropertiesForFile(e){let o=this.app,t=this.app.foldManager.loadPath(e.path);if(t&&this.isPropertiesFolded(t))if(t.folds.every(s=>s.from==0)&&t.folds.some(s=>s.to==0)){let s=o.appId+"-note-fold-"+e.path;localStorage.removeItem(s)}else{let s={folds:t.folds.filter(r=>r.from!==0),lines:t.lines};o.foldManager.savePath(e.path,s)}}isPropertiesFolded(e){return e.folds.some(o=>o.from==0&&o.to==0)}onunload(){}};
